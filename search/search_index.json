{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rio-Tiler-PDS: A rio-tiler plugin for Public Datasets \u00b6 A rio-tiler plugin to read from publicly-available datasets. Important This is the new module for rio-tiler missions specific (ref: cogeotiff/rio-tiler#195 ) Documentation : cogeotiff.github.io/rio-tiler-pds/ Source Code : cogeotiff/rio-tiler-pds Installation \u00b6 You can install rio-tiler-pds using pip $ pip install -U pip $ pip install rio-tiler-pds or install from source: pip install git+ github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6 $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-tiler-pds.git Datasets \u00b6 Data Level Format Owner Region Bucket Type Link Sentinel 2 L1C JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A COG Digital Earth Africa / AWS us-west-2 Public www.digitalearthafrica.org/news/operational-and-ready-use-satellite-data-now-available-across-africa Sentinel 1 L1C COG (Internal GCPS) Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-1/ Landsat 8 L1 GTiff (External Overviews) Planet / AWS us-west-2 Public registry.opendata.aws/landsat-8/ CBERS 4 L1 COG AMS Kepler / AWS us-east-1 Public registry.opendata.aws/cbers/ Adding more dataset : If you know of another publicly-available dataset that can easily be described with a \"scene id\", please feel free to open an issue . Warnings \u00b6 Requester-pays Buckets \u00b6 On AWS, sentinel2 , sentinel1 , and cbers datasets are stored in requester pays buckets. This means that the cost of GET and LIST requests and egress fees for downloading files outside the AWS region will be charged to the accessing users , not the organization hosting the bucket. For rio-tiler and rio-tiler-pds to work with such buckets, you'll need to set AWS_REQUEST_PAYER=\"requester\" in your shell environment. Partial reading on Cloud hosted dataset \u00b6 When reading data, rio-tiler-pds performs partial reads when possible. Hence performance will be best on data stored as Cloud Optimized GeoTIFF (COG) . It's important to note that Sentinel-2 scenes hosted on AWS are not in Cloud Optimized format but in JPEG2000 . Partial reads from JPEG2000 files are inefficient, and GDAL (the library underlying rio-tiler-pds and rasterio ) will need to make many GET requests and transfer a lot of data. This will be both slow and expensive, since AWS's JPEG2000 collection of Sentinel 2 data is stored in a requester pays bucket. Ref: Do you really want people using your data blog post. Overview \u00b6 Readers \u00b6 Each dataset has its own submodule (e.g sentinel2: rio_tiler_pds.sentinel.aws ) from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader All Readers are subclass of rio_tiler.io.BaseReader and inherit its properties/methods. Properties \u00b6 bounds : Scene bounding box minzoom : WebMercator MinZoom (e.g 7 for Landsat8) maxzoom : WebMercator MaxZoom (e.g 12 for Landsat8) center : Scene center spatial_info : zooms, bounds and center Methods \u00b6 info : Returns band's simple info (e.g nodata, band_descriptions, ....) stats : Returns band's statistics (percentile, histogram, ...) metadata : info + stats tile : Read web mercator map tile from bands part : Extract part of bands preview : Returns a low resolution preview from bands point : Returns band's pixel value for a given lon,lat Other \u00b6 bands (property): List of available bands for each dataset Scene ID \u00b6 All readers take scene id as main input. The scene id is used internaly by the reader to derive the full path of the data. e.g: Landsat on AWS Because the Landsat AWS PDS follows a regular schema to store the data ( s3://{bucket}/c1/L8/{path}/{row}/{scene}/{scene}_{band}.TIF\" ), we can easily reconstruct the full band's path by parsing the scene id. from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.landsat.utils import sceneid_parser sceneid_parser ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) > { 'sensor' : 'C' , 'satellite' : '08' , 'processingCorrectionLevel' : 'L1TP' , 'path' : '016' , 'row' : '037' , 'acquisitionYear' : '2017' , 'acquisitionMonth' : '08' , 'acquisitionDay' : '13' , 'processingYear' : '2017' , 'processingMonth' : '08' , 'processingDay' : '14' , 'collectionNumber' : '01' , 'collectionCategory' : 'RT' , 'scene' : 'LC08_L1TP_016037_20170813_20170814_01_RT' , 'date' : '2017-08-13' } with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . _get_band_url ( \"B1\" )) > s3 : // landsat - pds / c1 / L8 / 016 / 037 / LC08_L1TP_016037_20170813_20170814_01_RT / LC08_L1TP_016037_20170813_20170814_01_RT_B1 . TIF Each dataset has a specific scene id format: - Landsat - link: [rio_tiler_pds.landsat.utils.sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/landsat/utils.py#L35-L56) - regex: `^L[COTEM]0[0-9]_L\\d{1}[A-Z]{2}_\\d{6}_\\d{8}_\\d{8}_\\d{2}_(T1|T2|RT)$` - example: `LC08_L1TP_016037_20170813_20170814_01_RT` - Sentinel 1 L1C - link: [rio_tiler_pds.sentinel.utils.s1_sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/sentinel/utils.py#L98-L121) - regex: `^S1[AB]_(IW)|(EW)_[A-Z]{3}[FHM]_[0-9][SA][A-Z]{2}_[0-9]{8}T[0-9]{6}_[0-9]{8}T[0-9]{6}_[0-9A-Z]{6}_[0-9A-Z]{6}_[0-9A-Z]{4}$` - example: `S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B` - Sentinel 2 JPEG2000 and Sentinel 2 COG - link: [rio_tiler_pds.sentinel.utils.s2_sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/sentinel/utils.py#L25-L60) - regex: `^S2[AB]_[0-9]{2}[A-Z]{3}_[0-9]{8}_[0-9]_L[0-2][A-C]$` or `^S2[AB]_L[0-2][A-C]_[0-9]{8}_[0-9]{2}[A-Z]{3}_[0-9]$` - example: `S2A_29RKH_20200219_0_L2A`, `S2A_L1C_20170729_19UDP_0`, `S2A_L2A_20170729_19UDP_0` - CBERS - link: [rio_tiler_pds.cbers.utils.sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/cbers/utils.py#L26-L41) - regex: `^CBERS_4_\\w+_[0-9]{8}_[0-9]{3}_[0-9]{3}_L[0-9]$` - example: `CBERS_4_MUX_20171121_057_094_L2`, `CBERS_4_AWFI_20170420_146_129_L2`, `CBERS_4_PAN10M_20170427_161_109_L4`, `CBERS_4_PAN5M_20170425_153_114_L4` Band Per Asset/File \u00b6 rio-tiler-pds Readers assume that bands (e.g eo:band in STAC) are stored in separate files. $ aws s3 ls landsat-pds/c1/L8/013/031/LC08_L1TP_013031_20130930_20170308_01_T1/ LC08_L1TP_013031_20130930_20170308_01_T1_B1.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B10.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B11.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B2.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B3.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B4.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B5.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B6.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B7.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B8.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B9.TIF LC08_L1TP_013031_20130930_20170308_01_T1_BQA.TIF When reading data or metadata, readers will merge them. e.g with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = ( \"B01\" , \"B02\" ) assert tile . shape == ( 2 , 256 , 256 ) print ( sentinel . stats ( bands = ( \"B8A\" , \"B02\" ))) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] }, 'B02' : { ... } } Changes \u00b6 See CHANGES.md . Contribution & Development \u00b6 See CONTRIBUTING.md License \u00b6 See LICENSE.txt Authors \u00b6 The rio-tiler project was begun at Mapbox and has been transferred in January 2019. See AUTHORS.txt for a listing of individual contributors.","title":"Home"},{"location":"#rio-tiler-pds-a-rio-tiler-plugin-for-public-datasets","text":"A rio-tiler plugin to read from publicly-available datasets. Important This is the new module for rio-tiler missions specific (ref: cogeotiff/rio-tiler#195 ) Documentation : cogeotiff.github.io/rio-tiler-pds/ Source Code : cogeotiff/rio-tiler-pds","title":"Rio-Tiler-PDS: A rio-tiler plugin for Public Datasets"},{"location":"#installation","text":"You can install rio-tiler-pds using pip $ pip install -U pip $ pip install rio-tiler-pds or install from source: pip install git+ github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6 $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-tiler-pds.git","title":"Installation"},{"location":"#datasets","text":"Data Level Format Owner Region Bucket Type Link Sentinel 2 L1C JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A COG Digital Earth Africa / AWS us-west-2 Public www.digitalearthafrica.org/news/operational-and-ready-use-satellite-data-now-available-across-africa Sentinel 1 L1C COG (Internal GCPS) Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-1/ Landsat 8 L1 GTiff (External Overviews) Planet / AWS us-west-2 Public registry.opendata.aws/landsat-8/ CBERS 4 L1 COG AMS Kepler / AWS us-east-1 Public registry.opendata.aws/cbers/ Adding more dataset : If you know of another publicly-available dataset that can easily be described with a \"scene id\", please feel free to open an issue .","title":"Datasets"},{"location":"#warnings","text":"","title":"Warnings"},{"location":"#requester-pays-buckets","text":"On AWS, sentinel2 , sentinel1 , and cbers datasets are stored in requester pays buckets. This means that the cost of GET and LIST requests and egress fees for downloading files outside the AWS region will be charged to the accessing users , not the organization hosting the bucket. For rio-tiler and rio-tiler-pds to work with such buckets, you'll need to set AWS_REQUEST_PAYER=\"requester\" in your shell environment.","title":"Requester-pays Buckets"},{"location":"#partial-reading-on-cloud-hosted-dataset","text":"When reading data, rio-tiler-pds performs partial reads when possible. Hence performance will be best on data stored as Cloud Optimized GeoTIFF (COG) . It's important to note that Sentinel-2 scenes hosted on AWS are not in Cloud Optimized format but in JPEG2000 . Partial reads from JPEG2000 files are inefficient, and GDAL (the library underlying rio-tiler-pds and rasterio ) will need to make many GET requests and transfer a lot of data. This will be both slow and expensive, since AWS's JPEG2000 collection of Sentinel 2 data is stored in a requester pays bucket. Ref: Do you really want people using your data blog post.","title":"Partial reading on Cloud hosted dataset"},{"location":"#overview","text":"","title":"Overview"},{"location":"#readers","text":"Each dataset has its own submodule (e.g sentinel2: rio_tiler_pds.sentinel.aws ) from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader All Readers are subclass of rio_tiler.io.BaseReader and inherit its properties/methods.","title":"Readers"},{"location":"#properties","text":"bounds : Scene bounding box minzoom : WebMercator MinZoom (e.g 7 for Landsat8) maxzoom : WebMercator MaxZoom (e.g 12 for Landsat8) center : Scene center spatial_info : zooms, bounds and center","title":"Properties"},{"location":"#methods","text":"info : Returns band's simple info (e.g nodata, band_descriptions, ....) stats : Returns band's statistics (percentile, histogram, ...) metadata : info + stats tile : Read web mercator map tile from bands part : Extract part of bands preview : Returns a low resolution preview from bands point : Returns band's pixel value for a given lon,lat","title":"Methods"},{"location":"#other","text":"bands (property): List of available bands for each dataset","title":"Other"},{"location":"#scene-id","text":"All readers take scene id as main input. The scene id is used internaly by the reader to derive the full path of the data. e.g: Landsat on AWS Because the Landsat AWS PDS follows a regular schema to store the data ( s3://{bucket}/c1/L8/{path}/{row}/{scene}/{scene}_{band}.TIF\" ), we can easily reconstruct the full band's path by parsing the scene id. from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.landsat.utils import sceneid_parser sceneid_parser ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) > { 'sensor' : 'C' , 'satellite' : '08' , 'processingCorrectionLevel' : 'L1TP' , 'path' : '016' , 'row' : '037' , 'acquisitionYear' : '2017' , 'acquisitionMonth' : '08' , 'acquisitionDay' : '13' , 'processingYear' : '2017' , 'processingMonth' : '08' , 'processingDay' : '14' , 'collectionNumber' : '01' , 'collectionCategory' : 'RT' , 'scene' : 'LC08_L1TP_016037_20170813_20170814_01_RT' , 'date' : '2017-08-13' } with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . _get_band_url ( \"B1\" )) > s3 : // landsat - pds / c1 / L8 / 016 / 037 / LC08_L1TP_016037_20170813_20170814_01_RT / LC08_L1TP_016037_20170813_20170814_01_RT_B1 . TIF Each dataset has a specific scene id format: - Landsat - link: [rio_tiler_pds.landsat.utils.sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/landsat/utils.py#L35-L56) - regex: `^L[COTEM]0[0-9]_L\\d{1}[A-Z]{2}_\\d{6}_\\d{8}_\\d{8}_\\d{2}_(T1|T2|RT)$` - example: `LC08_L1TP_016037_20170813_20170814_01_RT` - Sentinel 1 L1C - link: [rio_tiler_pds.sentinel.utils.s1_sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/sentinel/utils.py#L98-L121) - regex: `^S1[AB]_(IW)|(EW)_[A-Z]{3}[FHM]_[0-9][SA][A-Z]{2}_[0-9]{8}T[0-9]{6}_[0-9]{8}T[0-9]{6}_[0-9A-Z]{6}_[0-9A-Z]{6}_[0-9A-Z]{4}$` - example: `S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B` - Sentinel 2 JPEG2000 and Sentinel 2 COG - link: [rio_tiler_pds.sentinel.utils.s2_sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/sentinel/utils.py#L25-L60) - regex: `^S2[AB]_[0-9]{2}[A-Z]{3}_[0-9]{8}_[0-9]_L[0-2][A-C]$` or `^S2[AB]_L[0-2][A-C]_[0-9]{8}_[0-9]{2}[A-Z]{3}_[0-9]$` - example: `S2A_29RKH_20200219_0_L2A`, `S2A_L1C_20170729_19UDP_0`, `S2A_L2A_20170729_19UDP_0` - CBERS - link: [rio_tiler_pds.cbers.utils.sceneid_parser](https://github.com/cogeotiff/rio-tiler-pds/blob/e4421d3cf7c23b7b3552b8bb16ee5913a5483caf/rio_tiler_pds/cbers/utils.py#L26-L41) - regex: `^CBERS_4_\\w+_[0-9]{8}_[0-9]{3}_[0-9]{3}_L[0-9]$` - example: `CBERS_4_MUX_20171121_057_094_L2`, `CBERS_4_AWFI_20170420_146_129_L2`, `CBERS_4_PAN10M_20170427_161_109_L4`, `CBERS_4_PAN5M_20170425_153_114_L4`","title":"Scene ID"},{"location":"#band-per-assetfile","text":"rio-tiler-pds Readers assume that bands (e.g eo:band in STAC) are stored in separate files. $ aws s3 ls landsat-pds/c1/L8/013/031/LC08_L1TP_013031_20130930_20170308_01_T1/ LC08_L1TP_013031_20130930_20170308_01_T1_B1.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B10.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B11.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B2.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B3.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B4.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B5.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B6.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B7.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B8.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B9.TIF LC08_L1TP_013031_20130930_20170308_01_T1_BQA.TIF When reading data or metadata, readers will merge them. e.g with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = ( \"B01\" , \"B02\" ) assert tile . shape == ( 2 , 256 , 256 ) print ( sentinel . stats ( bands = ( \"B8A\" , \"B02\" ))) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] }, 'B02' : { ... } }","title":"Band Per Asset/File"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#license","text":"See LICENSE.txt","title":"License"},{"location":"#authors","text":"The rio-tiler project was begun at Mapbox and has been transferred in January 2019. See AUTHORS.txt for a listing of individual contributors.","title":"Authors"},{"location":"contributing/","text":"Development - Contributing \u00b6 Issues and pull requests are more than welcome: github.com/cogeotiff/rio-tiler-pds/issues dev install $ git clone https://github.com/cogeotiff/rio-tiler-pds.git $ cd rio-tiler-pds $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs \u00b6 pip install rio_tiler_pds[docs] Hot-reloading docs: git clone https://github.com/cogeotiff/rio-tiler-pds cd rio-tiler-pds mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#development-contributing","text":"Issues and pull requests are more than welcome: github.com/cogeotiff/rio-tiler-pds/issues dev install $ git clone https://github.com/cogeotiff/rio-tiler-pds.git $ cd rio-tiler-pds $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install","title":"Development - Contributing"},{"location":"contributing/#docs","text":"pip install rio_tiler_pds[docs] Hot-reloading docs: git clone https://github.com/cogeotiff/rio-tiler-pds cd rio-tiler-pds mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): mkdocs gh-deploy","title":"Docs"},{"location":"release-notes/","text":"Release Notes \u00b6 0.2.0 (2020-08-31) \u00b6 Revert the use of assets options to bands (#12) from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : # in 0.1.1 (PAST) tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) # in 0.2.0 (NOW) tile , data = landsat . tile ( x , y , z , bands = \"B1\" ) 0.1.1 (2020-08-28) \u00b6 avoid nodata options colision with kwargs in L8Reader 0.1.0 (2020-08-27) \u00b6 Initial release. Move code from rio-tiler Update for rio-tiler==2.0b8 (use COGReader and MultiBaseReader) Create new Classes (using attrs) and use ContextManager ( with Reader(\"sceneid\") as scene: ) Remove Landsat 8 pre-collection support Add Sentinel 2 COGs dataset support Use TileInfo.json and ProductInfo.json to retrieve Sentinel 1 & 2 bounds Use assets options instead of bands Add expression options in readers Readers \u00b6 from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader Example \u00b6 from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) tile , data = landsat . tile ( x , y , z , expression = \"B1/B2\" )","title":"Release"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#020-2020-08-31","text":"Revert the use of assets options to bands (#12) from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : # in 0.1.1 (PAST) tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) # in 0.2.0 (NOW) tile , data = landsat . tile ( x , y , z , bands = \"B1\" )","title":"0.2.0 (2020-08-31)"},{"location":"release-notes/#011-2020-08-28","text":"avoid nodata options colision with kwargs in L8Reader","title":"0.1.1 (2020-08-28)"},{"location":"release-notes/#010-2020-08-27","text":"Initial release. Move code from rio-tiler Update for rio-tiler==2.0b8 (use COGReader and MultiBaseReader) Create new Classes (using attrs) and use ContextManager ( with Reader(\"sceneid\") as scene: ) Remove Landsat 8 pre-collection support Add Sentinel 2 COGs dataset support Use TileInfo.json and ProductInfo.json to retrieve Sentinel 1 & 2 bounds Use assets options instead of bands Add expression options in readers","title":"0.1.0 (2020-08-27)"},{"location":"release-notes/#readers","text":"from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader","title":"Readers"},{"location":"release-notes/#example","text":"from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) tile , data = landsat . tile ( x , y , z , expression = \"B1/B2\" )","title":"Example"},{"location":"usage/","text":"Usage \u00b6 Sentinel 2 - AWS \u00b6 L1C - JPEG2000 \u00b6 bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A from rio_tiler_pds.sentinel.aws import S2L1CReader # We use __enter__ context manager for the Reader. # When creating the instance of `sentinel` the Reader will fetch the sentinel 2 TileInfo.json # to retrieve the bounds of the dataset and other metadata available at `sentinel.tileInfo`. with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . center ) > ( - 69.4190338105916 , 48.25699850457617 , 8 ) print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.97083660271242 , 47.761069480166974 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.4190338105916 , 48.25699850457617 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( sentinel . stats ( bands = \"B8A\" )) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] } } tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = \"B01\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , bands = ( \"B01\" , \"B02\" ))) # Result is in form of # [ # value for band 1 in band B01, # value for band 1 in band B02 # ] > [ 1230 , 875 ] # Working with Expression tile , mask = sentinel . tile ( 77 , 89 , 8 , expression = \"B01/B02\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , expression = \"B01/B02\" )) > [ 1.424673784104389 ] L2A - JPEG2000 \u00b6 bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP bands are not supported. from rio_tiler_pds.sentinel.aws import S2L2AReader with S2L2AReader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.96945818759949 , 47.7610811323474 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.41834460303514 , 48.257004330666376 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } COG (Only L2A available for now) \u00b6 bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP STAC assets are not supported. from rio_tiler_pds.sentinel.aws import S2COGReader with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as sentinel : print ( sentinel . bands ) > ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) # bounds and metadata are derived from the STAC item stored with the COG print ( type ( sentinel . stac_item )) > dict Sentinel 1 - AWS \u00b6 from rio_tiler_pds.sentinel.aws import S1L1CReader with S1L1CReader ( \"S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B\" ) as sentinel : print ( sentinel . bands ) > ( 'vv' , 'vh' ) print ( sentine . bounds ) > ( 75.605247 , 9.225784 , 78.203903 , 11.190425 ) print ( type ( sentinel . productInfo )) > dict print ( sentinel . _get_band_url ( \"vv\" )) > 's3://sentinel-s1-l1c/GRD/2018/7/16/IW/DV/S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B/measurement/iw-vv.tiff' Landsat 8 - AWS \u00b6 Landsat 8 dataset hosted on AWS are not a proper Cloud Optimized GeoTIFF because they have external overviews. To make sure the performance is good enough and limit the number of LIST/GET requests from GDAL/Rasterio, we can set some environment variables: # https://trac.osgeo.org/gdal/wiki/ConfigOptions#CPL_VSIL_CURL_ALLOWED_EXTENSIONS CPL_VSIL_CURL_ALLOWED_EXTENSIONS = .TIF,.ovr # https://trac.osgeo.org/gdal/wiki/ConfigOptions#GDAL_DISABLE_READDIR_ON_OPEN GDAL_DISABLE_READDIR_ON_OPEN = FALSE You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import L8Reader with rasterio . Env ( CPL_VSIL_CURL_ALLOWED_EXTENSIONS = \".TIF,.ovr\" , GDAL_DISABLE_READDIR_ON_OPEN = \"FALSE\" , ): with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . bands ) > ( 'B1' , 'B2' , 'B3' , 'B4' , 'B5' , 'B6' , 'B7' , 'B8' , 'B9' , 'B10' , 'B11' , 'BQA' assert landsat . minzoom == 7 assert landsat . minzoom == 12 print ( landsat . spatial_info ) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 } print ( landsat . info ( bands = \"B1\" )) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B1' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( landsat . stats ( bands = \"B1\" )) > { 'B1' : { 'pc' : [ 1207 , 6989 ], 'min' : 922 , 'max' : 13512 , 'std' : 297 , 'histogram' : [ [ 574527 , 54320 , 37316 , 25318 , 15086 , 8101 , 3145 , 744 , 160 , 21 ], [ 922 , 2181 , 3440 , 4699 , 5958 , 7217 , 8476 , 9735 , 10994 , 12253 , 13512 ] ] } } tile_z = 8 tile_x = 71 tile_y = 102 tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" )) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = \"B10\" ) assert data . shape == ( 1 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True ) assert tile . shape == ( 3 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , expression = \"B5*0.8, B4*1.1, B3*0.8\" ) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . preview ( bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True , width = 256 , height = 256 ) assert data . shape == ( 3 , 256 , 256 ) CBERS 4 - AWS \u00b6 from rio_tiler_pds.cbers.aws import CBERSReader CBERS_MUX_SCENE = \"CBERS_4_MUX_20171121_057_094_L2\" CBERS_AWFI_SCENE = \"CBERS_4_AWFI_20170420_146_129_L2\" CBERS_PAN10M_SCENE = \"CBERS_4_PAN10M_20170427_161_109_L4\" CBERS_PAN5M_SCENE = \"CBERS_4_PAN5M_20170425_153_114_L4\" with CBERSReader ( \"CBERS_4_MUX_20171121_057_094_L2\" ) as cbers : print ( cbers . bands ) > ( 'B5' , 'B6' , 'B7' , 'B8' ) print ( cbers . bounds ) > ( 53.302020833057796 , 4.756472757234311 , 54.628483877373 , 6.025171883475984 ) assert cbers . minzoom == 8 assert cbers . maxzoom == 12 with CBERSReader ( \"CBERS_4_AWFI_20170420_146_129_L2\" ) as cbers : print ( cbers . bands ) > ( 'B13' , 'B14' , 'B15' , 'B16' ) with CBERSReader ( \"CBERS_4_PAN10M_20170427_161_109_L4\" ) as cbers : print ( cbers . bands ) > ( 'B2' , 'B3' , 'B4' ) with CBERSReader ( \"CBERS_4_PAN5M_20170425_153_114_L4\" ) as cbers : print ( cbers . bands ) > ( 'B1' ,) Requester-Pays \u00b6 Some data are stored on AWS requester-pays buckets (you are charged for LIST/GET requests and data transfer outside the bucket region). For those datasets you need to set AWS_REQUEST_PAYER=\"requester\" environement variable to tell AWS S3 that you agree with requester-pays principle. You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.sentinel.aws import S2L1CReader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as s2 : print ( s2 . preview ( bands = \"B01\" , width = 64 , height = 64 ))","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#sentinel-2-aws","text":"","title":"Sentinel 2 - AWS"},{"location":"usage/#l1c-jpeg2000","text":"bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A from rio_tiler_pds.sentinel.aws import S2L1CReader # We use __enter__ context manager for the Reader. # When creating the instance of `sentinel` the Reader will fetch the sentinel 2 TileInfo.json # to retrieve the bounds of the dataset and other metadata available at `sentinel.tileInfo`. with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . center ) > ( - 69.4190338105916 , 48.25699850457617 , 8 ) print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.97083660271242 , 47.761069480166974 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.4190338105916 , 48.25699850457617 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( sentinel . stats ( bands = \"B8A\" )) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] } } tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = \"B01\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , bands = ( \"B01\" , \"B02\" ))) # Result is in form of # [ # value for band 1 in band B01, # value for band 1 in band B02 # ] > [ 1230 , 875 ] # Working with Expression tile , mask = sentinel . tile ( 77 , 89 , 8 , expression = \"B01/B02\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , expression = \"B01/B02\" )) > [ 1.424673784104389 ]","title":"L1C - JPEG2000"},{"location":"usage/#l2a-jpeg2000","text":"bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP bands are not supported. from rio_tiler_pds.sentinel.aws import S2L2AReader with S2L2AReader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.96945818759949 , 47.7610811323474 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.41834460303514 , 48.257004330666376 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' }","title":"L2A - JPEG2000"},{"location":"usage/#cog-only-l2a-available-for-now","text":"bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP STAC assets are not supported. from rio_tiler_pds.sentinel.aws import S2COGReader with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as sentinel : print ( sentinel . bands ) > ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) # bounds and metadata are derived from the STAC item stored with the COG print ( type ( sentinel . stac_item )) > dict","title":"COG (Only L2A available for now)"},{"location":"usage/#sentinel-1-aws","text":"from rio_tiler_pds.sentinel.aws import S1L1CReader with S1L1CReader ( \"S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B\" ) as sentinel : print ( sentinel . bands ) > ( 'vv' , 'vh' ) print ( sentine . bounds ) > ( 75.605247 , 9.225784 , 78.203903 , 11.190425 ) print ( type ( sentinel . productInfo )) > dict print ( sentinel . _get_band_url ( \"vv\" )) > 's3://sentinel-s1-l1c/GRD/2018/7/16/IW/DV/S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B/measurement/iw-vv.tiff'","title":"Sentinel 1 - AWS"},{"location":"usage/#landsat-8-aws","text":"Landsat 8 dataset hosted on AWS are not a proper Cloud Optimized GeoTIFF because they have external overviews. To make sure the performance is good enough and limit the number of LIST/GET requests from GDAL/Rasterio, we can set some environment variables: # https://trac.osgeo.org/gdal/wiki/ConfigOptions#CPL_VSIL_CURL_ALLOWED_EXTENSIONS CPL_VSIL_CURL_ALLOWED_EXTENSIONS = .TIF,.ovr # https://trac.osgeo.org/gdal/wiki/ConfigOptions#GDAL_DISABLE_READDIR_ON_OPEN GDAL_DISABLE_READDIR_ON_OPEN = FALSE You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import L8Reader with rasterio . Env ( CPL_VSIL_CURL_ALLOWED_EXTENSIONS = \".TIF,.ovr\" , GDAL_DISABLE_READDIR_ON_OPEN = \"FALSE\" , ): with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . bands ) > ( 'B1' , 'B2' , 'B3' , 'B4' , 'B5' , 'B6' , 'B7' , 'B8' , 'B9' , 'B10' , 'B11' , 'BQA' assert landsat . minzoom == 7 assert landsat . minzoom == 12 print ( landsat . spatial_info ) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 } print ( landsat . info ( bands = \"B1\" )) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B1' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( landsat . stats ( bands = \"B1\" )) > { 'B1' : { 'pc' : [ 1207 , 6989 ], 'min' : 922 , 'max' : 13512 , 'std' : 297 , 'histogram' : [ [ 574527 , 54320 , 37316 , 25318 , 15086 , 8101 , 3145 , 744 , 160 , 21 ], [ 922 , 2181 , 3440 , 4699 , 5958 , 7217 , 8476 , 9735 , 10994 , 12253 , 13512 ] ] } } tile_z = 8 tile_x = 71 tile_y = 102 tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" )) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = \"B10\" ) assert data . shape == ( 1 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True ) assert tile . shape == ( 3 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , expression = \"B5*0.8, B4*1.1, B3*0.8\" ) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . preview ( bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True , width = 256 , height = 256 ) assert data . shape == ( 3 , 256 , 256 )","title":"Landsat 8 - AWS"},{"location":"usage/#cbers-4-aws","text":"from rio_tiler_pds.cbers.aws import CBERSReader CBERS_MUX_SCENE = \"CBERS_4_MUX_20171121_057_094_L2\" CBERS_AWFI_SCENE = \"CBERS_4_AWFI_20170420_146_129_L2\" CBERS_PAN10M_SCENE = \"CBERS_4_PAN10M_20170427_161_109_L4\" CBERS_PAN5M_SCENE = \"CBERS_4_PAN5M_20170425_153_114_L4\" with CBERSReader ( \"CBERS_4_MUX_20171121_057_094_L2\" ) as cbers : print ( cbers . bands ) > ( 'B5' , 'B6' , 'B7' , 'B8' ) print ( cbers . bounds ) > ( 53.302020833057796 , 4.756472757234311 , 54.628483877373 , 6.025171883475984 ) assert cbers . minzoom == 8 assert cbers . maxzoom == 12 with CBERSReader ( \"CBERS_4_AWFI_20170420_146_129_L2\" ) as cbers : print ( cbers . bands ) > ( 'B13' , 'B14' , 'B15' , 'B16' ) with CBERSReader ( \"CBERS_4_PAN10M_20170427_161_109_L4\" ) as cbers : print ( cbers . bands ) > ( 'B2' , 'B3' , 'B4' ) with CBERSReader ( \"CBERS_4_PAN5M_20170425_153_114_L4\" ) as cbers : print ( cbers . bands ) > ( 'B1' ,)","title":"CBERS 4 - AWS"},{"location":"usage/#requester-pays","text":"Some data are stored on AWS requester-pays buckets (you are charged for LIST/GET requests and data transfer outside the bucket region). For those datasets you need to set AWS_REQUEST_PAYER=\"requester\" environement variable to tell AWS S3 that you agree with requester-pays principle. You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.sentinel.aws import S2L1CReader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as s2 : print ( s2 . preview ( bands = \"B01\" , width = 64 , height = 64 ))","title":"Requester-Pays"},{"location":"API/baseclasses/","text":"abstract class rio_tiler_pds.reader. MultiBandReader ( reader , reader_options=NOTHING ) Bases rio_tiler.io.base.BaseReader Multi Band Reader. Parameters reader (type of BaseReader) \u2014 reader_options (dict, optional) \u2014 Attributes bounds (tuple) \u2014 Dataset's bounds. center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level. minzoom (int) \u2014 Dataset's Min Zoom level. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. abstract method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 class rio_tiler_pds.reader. GCPCOGReader ( filepath , dataset=None , minzoom=None , maxzoom=None , colormap=None , nodata=None , unscale=None , vrt_options=None ) Bases rio_tiler.io.cogeo.COGReader rio_tiler.io.base.BaseReader Custom COG Reader with GCPS support. Parameters filepath (str) \u2014 dataset (DatasetReader, DatasetWriter, MemoryFile, or WarpedVRT, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 colormap (dict, optional) \u2014 nodata (float, int, str, or NoneType, optional) \u2014 unscale (bool, optional) \u2014 vrt_options (dict, optional) \u2014 Attributes ------- \u2014 ---------- \u2014 Methods \u2014 Properties \u2014 bounds (tuple[float]) \u2014 COG bounds in WGS84 crs. center (tuple[float, float, int]) \u2014 COG center + minzoom center (float, float, int) \u2014 Dataset center + minzoom. colormap (dict) \u2014 COG internal colormap. dataset (WarpedVRT) \u2014 rasterio WarpedVRT dataset. filepath (str) \u2014 Cloud Optimized GeoTIFF path. info (dict) \u2014 General information about the COG (datatype, indexes, ...) maxzoom (int) \u2014 COG maximum zoom level. meta(pmin=5, pmax=95) \u2014 Get info + raster statistics minzoom (int) \u2014 COG minimum zoom level. part((0,10,0,10), indexes=(1,2,3,), expression=\"\u001dB1/B20\", max_size=1024) \u2014 Read part of the COG. point((10, 10), indexes=1) \u2014 Read a point value from the COG. preview(max_size=1024) \u2014 Read preview of the COG. spatial_info (dict) \u2014 Return Dataset's spatial info. src_dataset (DatasetReader) \u2014 rasterio openned dataset. stats(pmin=5, pmax=95) \u2014 Get Raster statistics. tile(0, 0, 0, indexes=(1,2,3), expression=\"\u001dB1/B2\", tilesize=512, resampling_methods=\"nearest\") \u2014 Read a map tile from the COG. Methods __attrs_post_init__ ( ) \u2014 Define _kwargs. __enter__ ( ) \u2014 Open rasterio datasets. __exit__ ( exc_type , exc_value , traceback ) \u2014 Close rasterio datasets. info ( ) (dict) \u2014 Return COG info. metadata ( pmin , pmax , **kwargs ) (dict) \u2014 Return COG info and statistics. part ( bbox , dst_crs , bounds_crs , max_size , indexes , expression , **kwargs ) (data: numpy ndarray) \u2014 Read part of a COG. point ( lon , lat , indexes , expression , **kwargs ) (point: list) \u2014 Read a value from a COG. preview ( indexes , expression , **kwargs ) (data: numpy ndarray) \u2014 Return a preview of a COG. stats ( pmin , pmax , hist_options , **kwargs ) (out: dict) \u2014 Return bands statistics from a COG. tile ( tile_x , tile_y , tile_z , tilesize , indexes , expression , **kwargs ) (data: numpy ndarray) \u2014 Read a Mercator Map tile from a COG. method __attrs_post_init__ ( ) Define _kwargs. method info ( ) \u2192 dict Return COG info. method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , **kwargs ) Return bands statistics from a COG. Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 **kwargs (any) \u2014 Attributes hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. e.g: {bins=20, range=(0, 1000)} kwargs (optional) \u2014 These are passed to 'rio_tiler.reader.stats' pmax (float, optional, (default: 98)) \u2014 Histogram maximum cut. pmin (float, optional, (default: 2)) \u2014 Histogram minimum cut. Returns (out: dict) Dictionary with bands statistics. method metadata ( pmin=2.0 , pmax=98.0 , **kwargs ) \u2192 dict Return COG info and statistics. Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , tilesize=256 , indexes=None , expression='' , **kwargs ) Read a Mercator Map tile from a COG. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 tilesize (int, optional) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.part' function. tile_x (int) \u2014 Mercator tile X index. tile_y (int) \u2014 Mercator tile Y index. tile_z (int) \u2014 Mercator tile ZOOM level. tilesize (int, optional (default: 256)) \u2014 Output image size. Returns (data: numpy ndarray) mask: numpy array method part ( bbox , dst_crs=None , bounds_crs=CRS.from_epsg(4326) , max_size=1024 , indexes=None , expression='' , **kwargs ) Read part of a COG. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 dst_crs (CRS, optional) \u2014 bounds_crs (CRS, optional) \u2014 max_size (int, optional) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes bbox (tuple) \u2014 bounds to read (left, bottom, right, top) in \"bounds_crs\". bounds_crs (CRS or str, optional) \u2014 bounds coordinate reference system, default is \"epsg:4326\" dst_crs (CRS or str, optional) \u2014 Target coordinate reference system, default is the bbox CRS. expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.part' function. max_size (int, optional) \u2014 Limit output size array, default is 1024. Returns (data: numpy ndarray) mask: numpy array method preview ( indexes=None , expression='' , **kwargs ) Return a preview of a COG. Parameters **kwargs (any) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.preview' function. Returns (data: numpy ndarray) mask: numpy array method point ( lon , lat , indexes=None , expression='' , **kwargs ) Read a value from a COG. Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes address (str) \u2014 file url. expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.point' function. lat (float) \u2014 Latittude. lon (float) \u2014 Longitude Returns (point: list) List of pixel values per bands indexes. method __enter__ ( ) Open rasterio datasets. method __exit__ ( exc_type , exc_value , traceback ) Close rasterio datasets. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014","title":"BaseClasses"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreader","text":"Bases rio_tiler.io.base.BaseReader Multi Band Reader. Parameters reader (type of BaseReader) \u2014 reader_options (dict, optional) \u2014 Attributes bounds (tuple) \u2014 Dataset's bounds. center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level. minzoom (int) \u2014 Dataset's Min Zoom level. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. abstract method","title":"rio_tiler_pds.reader.MultiBandReader"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler_pds.reader.MultiBandReader.enter"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.exit"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.parse_expression"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderinfo","text":"Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.info"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderstats","text":"Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.stats"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreadermetadata","text":"Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.metadata"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreadertile","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.tile"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderpart","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.part"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderpreview","text":"Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.preview"},{"location":"API/baseclasses/#rio_tiler_pdsreadermultibandreaderpoint","text":"Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 class","title":"rio_tiler_pds.reader.MultiBandReader.point"},{"location":"API/baseclasses/#rio_tiler_pdsreadergcpcogreader","text":"Bases rio_tiler.io.cogeo.COGReader rio_tiler.io.base.BaseReader Custom COG Reader with GCPS support. Parameters filepath (str) \u2014 dataset (DatasetReader, DatasetWriter, MemoryFile, or WarpedVRT, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 colormap (dict, optional) \u2014 nodata (float, int, str, or NoneType, optional) \u2014 unscale (bool, optional) \u2014 vrt_options (dict, optional) \u2014 Attributes ------- \u2014 ---------- \u2014 Methods \u2014 Properties \u2014 bounds (tuple[float]) \u2014 COG bounds in WGS84 crs. center (tuple[float, float, int]) \u2014 COG center + minzoom center (float, float, int) \u2014 Dataset center + minzoom. colormap (dict) \u2014 COG internal colormap. dataset (WarpedVRT) \u2014 rasterio WarpedVRT dataset. filepath (str) \u2014 Cloud Optimized GeoTIFF path. info (dict) \u2014 General information about the COG (datatype, indexes, ...) maxzoom (int) \u2014 COG maximum zoom level. meta(pmin=5, pmax=95) \u2014 Get info + raster statistics minzoom (int) \u2014 COG minimum zoom level. part((0,10,0,10), indexes=(1,2,3,), expression=\"\u001dB1/B20\", max_size=1024) \u2014 Read part of the COG. point((10, 10), indexes=1) \u2014 Read a point value from the COG. preview(max_size=1024) \u2014 Read preview of the COG. spatial_info (dict) \u2014 Return Dataset's spatial info. src_dataset (DatasetReader) \u2014 rasterio openned dataset. stats(pmin=5, pmax=95) \u2014 Get Raster statistics. tile(0, 0, 0, indexes=(1,2,3), expression=\"\u001dB1/B2\", tilesize=512, resampling_methods=\"nearest\") \u2014 Read a map tile from the COG. Methods __attrs_post_init__ ( ) \u2014 Define _kwargs. __enter__ ( ) \u2014 Open rasterio datasets. __exit__ ( exc_type , exc_value , traceback ) \u2014 Close rasterio datasets. info ( ) (dict) \u2014 Return COG info. metadata ( pmin , pmax , **kwargs ) (dict) \u2014 Return COG info and statistics. part ( bbox , dst_crs , bounds_crs , max_size , indexes , expression , **kwargs ) (data: numpy ndarray) \u2014 Read part of a COG. point ( lon , lat , indexes , expression , **kwargs ) (point: list) \u2014 Read a value from a COG. preview ( indexes , expression , **kwargs ) (data: numpy ndarray) \u2014 Return a preview of a COG. stats ( pmin , pmax , hist_options , **kwargs ) (out: dict) \u2014 Return bands statistics from a COG. tile ( tile_x , tile_y , tile_z , tilesize , indexes , expression , **kwargs ) (data: numpy ndarray) \u2014 Read a Mercator Map tile from a COG. method","title":"rio_tiler_pds.reader.GCPCOGReader"},{"location":"API/baseclasses/#rio_tileriocogeocogreaderattrs_post_init","text":"Define _kwargs. method","title":"rio_tiler.io.cogeo.COGReader.attrs_post_init"},{"location":"API/baseclasses/#rio_tileriocogeocogreaderinfo","text":"Return COG info. method","title":"rio_tiler.io.cogeo.COGReader.info"},{"location":"API/baseclasses/#rio_tileriocogeocogreaderstats","text":"Return bands statistics from a COG. Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 **kwargs (any) \u2014 Attributes hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. e.g: {bins=20, range=(0, 1000)} kwargs (optional) \u2014 These are passed to 'rio_tiler.reader.stats' pmax (float, optional, (default: 98)) \u2014 Histogram maximum cut. pmin (float, optional, (default: 2)) \u2014 Histogram minimum cut. Returns (out: dict) Dictionary with bands statistics. method","title":"rio_tiler.io.cogeo.COGReader.stats"},{"location":"API/baseclasses/#rio_tileriocogeocogreadermetadata","text":"Return COG info and statistics. Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 method","title":"rio_tiler.io.cogeo.COGReader.metadata"},{"location":"API/baseclasses/#rio_tileriocogeocogreadertile","text":"Read a Mercator Map tile from a COG. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 tilesize (int, optional) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.part' function. tile_x (int) \u2014 Mercator tile X index. tile_y (int) \u2014 Mercator tile Y index. tile_z (int) \u2014 Mercator tile ZOOM level. tilesize (int, optional (default: 256)) \u2014 Output image size. Returns (data: numpy ndarray) mask: numpy array method","title":"rio_tiler.io.cogeo.COGReader.tile"},{"location":"API/baseclasses/#rio_tileriocogeocogreaderpart","text":"Read part of a COG. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 dst_crs (CRS, optional) \u2014 bounds_crs (CRS, optional) \u2014 max_size (int, optional) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes bbox (tuple) \u2014 bounds to read (left, bottom, right, top) in \"bounds_crs\". bounds_crs (CRS or str, optional) \u2014 bounds coordinate reference system, default is \"epsg:4326\" dst_crs (CRS or str, optional) \u2014 Target coordinate reference system, default is the bbox CRS. expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.part' function. max_size (int, optional) \u2014 Limit output size array, default is 1024. Returns (data: numpy ndarray) mask: numpy array method","title":"rio_tiler.io.cogeo.COGReader.part"},{"location":"API/baseclasses/#rio_tileriocogeocogreaderpreview","text":"Return a preview of a COG. Parameters **kwargs (any) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.preview' function. Returns (data: numpy ndarray) mask: numpy array method","title":"rio_tiler.io.cogeo.COGReader.preview"},{"location":"API/baseclasses/#rio_tileriocogeocogreaderpoint","text":"Read a value from a COG. Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 indexes (int, sequence, or NoneType, optional) \u2014 expression (str, optional) \u2014 Attributes address (str) \u2014 file url. expression (str) \u2014 rio-tiler expression (e.g. b1/b2+b3) indexes (int or sequence of int) \u2014 Band indexes (e.g. 1 or (1, 2, 3)) kwargs (dict, optional) \u2014 These will be passed to the 'rio_tiler.reader.point' function. lat (float) \u2014 Latittude. lon (float) \u2014 Longitude Returns (point: list) List of pixel values per bands indexes. method","title":"rio_tiler.io.cogeo.COGReader.point"},{"location":"API/baseclasses/#rio_tiler_pdsreadergcpcogreaderenter","text":"Open rasterio datasets. method","title":"rio_tiler_pds.reader.GCPCOGReader.enter"},{"location":"API/baseclasses/#rio_tiler_pdsreadergcpcogreaderexit","text":"Close rasterio datasets. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014","title":"rio_tiler_pds.reader.GCPCOGReader.exit"},{"location":"API/cbers/","text":"Readers \u00b6 class rio_tiler_pds.cbers.aws.cbers4. CBERSReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING ) Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset CBERS 4 reader. Parameters reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 CBERS 4 sceneid. Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset's bounds. center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level. minzoom (int) \u2014 Dataset's Min Zoom level. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with CBERSReader ( 'CBERS_4_AWFI_20170420_146_129_L2' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method __enter__ ( ) Support using with Context Managers. Utils \u00b6 function rio_tiler_pds.cbers.utils. sceneid_parser ( sceneid ) Parse CBERS 4 scene id. Parameters sceneid (str) \u2014 CBERS 4 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidCBERSSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'CBERS_4_MUX_20171121_057_094_L2' )","title":"cbers"},{"location":"API/cbers/#readers","text":"class","title":"Readers"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreader","text":"Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset CBERS 4 reader. Parameters reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 CBERS 4 sceneid. Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset's bounds. center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level. minzoom (int) \u2014 Dataset's Min Zoom level. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with CBERSReader ( 'CBERS_4_AWFI_20170420_146_129_L2' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.exit"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.parse_expression"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreaderinfo","text":"Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.info"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreaderstats","text":"Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.stats"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreadermetadata","text":"Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.metadata"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreadertile","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.tile"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreaderpart","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.part"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreaderpreview","text":"Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.preview"},{"location":"API/cbers/#rio_tiler_pdsreadermultibandreaderpoint","text":"Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.point"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreaderenter","text":"Support using with Context Managers.","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader.enter"},{"location":"API/cbers/#utils","text":"function","title":"Utils"},{"location":"API/cbers/#rio_tiler_pdscbersutilssceneid_parser","text":"Parse CBERS 4 scene id. Parameters sceneid (str) \u2014 CBERS 4 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidCBERSSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'CBERS_4_MUX_20171121_057_094_L2' )","title":"rio_tiler_pds.cbers.utils.sceneid_parser"},{"location":"API/landsat/","text":"Readers \u00b6 class rio_tiler_pds.landsat.aws.landsat8. L8Reader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING ) Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Landsat 8 reader. Parameters reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 Landsat 8 sceneid. Attributes bands (tuple) \u2014 list of available bands (default is ('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'BQA')). bounds (tuple) \u2014 Dataset's bounds. center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 7). mtl_metadata (dict) \u2014 Landsat 8 MTL document content. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a value from COGs. preview ( bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , pan=False , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , pan=False , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method preview ( bands=None , expression='' , band_expression='' , pan=False , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a value from COGs. Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 Utils \u00b6 function rio_tiler_pds.landsat.utils. sceneid_parser ( sceneid ) Parse Landsat 8 scene id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat 8 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"landsat"},{"location":"API/landsat/#readers","text":"class","title":"Readers"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8reader","text":"Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Landsat 8 reader. Parameters reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 Landsat 8 sceneid. Attributes bands (tuple) \u2014 list of available bands (default is ('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'BQA')). bounds (tuple) \u2014 Dataset's bounds. center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 7). mtl_metadata (dict) \u2014 Landsat 8 MTL document content. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a value from COGs. preview ( bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader"},{"location":"API/landsat/#rio_tiler_pdsreadermultibandreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.exit"},{"location":"API/landsat/#rio_tiler_pdsreadermultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.parse_expression"},{"location":"API/landsat/#rio_tiler_pdsreadermultibandreaderinfo","text":"Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method","title":"rio_tiler_pds.reader.MultiBandReader.info"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerenter","text":"Support using with Context Managers. method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.enter"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerstats","text":"Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.stats"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readermetadata","text":"Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.metadata"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readertile","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.tile"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpart","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.part"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpreview","text":"Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.preview"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpoint","text":"Read a value from COGs. Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.point"},{"location":"API/landsat/#utils","text":"function","title":"Utils"},{"location":"API/landsat/#rio_tiler_pdslandsatutilssceneid_parser","text":"Parse Landsat 8 scene id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat 8 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"rio_tiler_pds.landsat.utils.sceneid_parser"},{"location":"API/sentinel/","text":"Readers \u00b6 module rio_tiler_pds.sentinel.aws. sentinel1 AWS Sentinel 1 reader. Classes S1L1CReader \u2014 AWS Public Dataset Sentinel 1 reader. class rio_tiler_pds.sentinel.aws.sentinel1. S1L1CReader ( sceneid , reader=<class 'rio_tiler_pds.reader.GCPCOGReader'> , reader_options=NOTHING ) Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 1 reader. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('vv', 'vh')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 1 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). productInfo (dict) \u2014 sentinel 1 productInfo.json content. scene_params \u2014 spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with S1L1CReader ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. module rio_tiler_pds.sentinel.aws. sentinel2 AWS Sentinel 2 readers. Attributes SENTINEL_L2_BANDS \u2014 SENTINEL_L2_PRODUCTS \u2014 default_l1c_bands \u2014 default_l2a_bands \u2014 Classes S2L1CReader \u2014 AWS Public Dataset Sentinel 2 L1C reader. S2L2AReader \u2014 AWS Public Dataset Sentinel 2 L2A reader. S2COGReader \u2014 AWS Public Dataset Sentinel 2 COGS reader. class rio_tiler_pds.sentinel.aws.sentinel2. S2L1CReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options={'nodata': 0} ) Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L1C reader. Parameters sceneid (str) \u2014 Sentinel-2 L1C sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 2 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). tileInfo (dict) \u2014 sentinel 2 tileInfo.json content. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. class rio_tiler_pds.sentinel.aws.sentinel2. S2L2AReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options={'nodata': 0} ) Bases rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L2A reader. Parameters sceneid (str) \u2014 Sentinel-2 L2A sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). center (float, float, int) \u2014 Dataset center + minzoom. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. class rio_tiler_pds.sentinel.aws.sentinel2. S2COGReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING ) Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 COGS reader. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (defined by the STAC item.json). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). stac_item (dict) \u2014 sentinel 2 COG STAC item content. Examples >>> with S2COGReader ( 'S2A_29RKH_20200219_0_L2A' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. Utils \u00b6 function rio_tiler_pds.sentinel.utils. s2_sceneid_parser ( sceneid ) Parse Sentinel 2 scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s2_sceneid_parser ( 'S2A_L1C_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_L2A_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_29RKH_20200219_0_L2A' ) function rio_tiler_pds.sentinel.utils. s1_sceneid_parser ( sceneid ) Parse Sentinel 1 scene id. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s1_sceneid_parser ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' )","title":"sentinel"},{"location":"API/sentinel/#readers","text":"module","title":"Readers"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1","text":"AWS Sentinel 1 reader. Classes S1L1CReader \u2014 AWS Public Dataset Sentinel 1 reader. class","title":"rio_tiler_pds.sentinel.aws.sentinel1"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1s1l1creader","text":"Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 1 reader. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('vv', 'vh')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 1 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). productInfo (dict) \u2014 sentinel 1 productInfo.json content. scene_params \u2014 spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with S1L1CReader ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. module","title":"rio_tiler_pds.sentinel.aws.sentinel1.S1L1CReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2","text":"AWS Sentinel 2 readers. Attributes SENTINEL_L2_BANDS \u2014 SENTINEL_L2_PRODUCTS \u2014 default_l1c_bands \u2014 default_l2a_bands \u2014 Classes S2L1CReader \u2014 AWS Public Dataset Sentinel 2 L1C reader. S2L2AReader \u2014 AWS Public Dataset Sentinel 2 L2A reader. S2COGReader \u2014 AWS Public Dataset Sentinel 2 COGS reader. class","title":"rio_tiler_pds.sentinel.aws.sentinel2"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l1creader","text":"Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L1C reader. Parameters sceneid (str) \u2014 Sentinel-2 L1C sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 2 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). tileInfo (dict) \u2014 sentinel 2 tileInfo.json content. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. class","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l2areader","text":"Bases rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L2A reader. Parameters sceneid (str) \u2014 Sentinel-2 L2A sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). center (float, float, int) \u2014 Dataset center + minzoom. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers. class","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2L2AReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2cogreader","text":"Bases rio_tiler_pds.reader.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 COGS reader. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (defined by the STAC item.json). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Dataset's spatial info (bounds, center and zooms). stac_item (dict) \u2014 sentinel 2 COG STAC item content. Examples >>> with S2COGReader ( 'S2A_29RKH_20200219_0_L2A' ) as scene : print ( scene . bounds ) Methods __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 hist_options (dict, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __enter__ ( ) Support using with Context Managers.","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2COGReader"},{"location":"API/sentinel/#utils","text":"function","title":"Utils"},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss2_sceneid_parser","text":"Parse Sentinel 2 scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s2_sceneid_parser ( 'S2A_L1C_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_L2A_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_29RKH_20200219_0_L2A' ) function","title":"rio_tiler_pds.sentinel.utils.s2_sceneid_parser"},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss1_sceneid_parser","text":"Parse Sentinel 1 scene id. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s1_sceneid_parser ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' )","title":"rio_tiler_pds.sentinel.utils.s1_sceneid_parser"}]}